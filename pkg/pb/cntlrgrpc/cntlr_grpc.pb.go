// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: cntlr.proto

package cntlrgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcClient interface {
	GetParamReq(ctx context.Context, in *GetParamReqData, opts ...grpc.CallOption) (*ReqResult, error)
	SetParamReq(ctx context.Context, in *SetParamReqData, opts ...grpc.CallOption) (*SetParamResData, error)
	GetInstancesReq(ctx context.Context, in *GetInstancesReqData, opts ...grpc.CallOption) (*ReqResult, error)
	AddInstanceReq(ctx context.Context, in *AddInstanceReqData, opts ...grpc.CallOption) (*AddInstanceResData, error)
	OperateReq(ctx context.Context, in *OperateReqData, opts ...grpc.CallOption) (*OperateResData, error)
	GetDatamodelReq(ctx context.Context, in *GetDatamodelReqData, opts ...grpc.CallOption) (*ReqResult, error)
	DeleteInstanceReq(ctx context.Context, in *DeleteInstanceReqData, opts ...grpc.CallOption) (*ReqResult, error)
	GetAgentMsgs(ctx context.Context, in *GetAgentMsgsData, opts ...grpc.CallOption) (*ReqResult, error)
	GetInfo(ctx context.Context, in *None, opts ...grpc.CallOption) (*InfoData, error)
	Stream(ctx context.Context, in *GetParamReqData, opts ...grpc.CallOption) (Grpc_StreamClient, error)
}

type grpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcClient(cc grpc.ClientConnInterface) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) GetParamReq(ctx context.Context, in *GetParamReqData, opts ...grpc.CallOption) (*ReqResult, error) {
	out := new(ReqResult)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/GetParamReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) SetParamReq(ctx context.Context, in *SetParamReqData, opts ...grpc.CallOption) (*SetParamResData, error) {
	out := new(SetParamResData)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/SetParamReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetInstancesReq(ctx context.Context, in *GetInstancesReqData, opts ...grpc.CallOption) (*ReqResult, error) {
	out := new(ReqResult)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/GetInstancesReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) AddInstanceReq(ctx context.Context, in *AddInstanceReqData, opts ...grpc.CallOption) (*AddInstanceResData, error) {
	out := new(AddInstanceResData)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/AddInstanceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) OperateReq(ctx context.Context, in *OperateReqData, opts ...grpc.CallOption) (*OperateResData, error) {
	out := new(OperateResData)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/OperateReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetDatamodelReq(ctx context.Context, in *GetDatamodelReqData, opts ...grpc.CallOption) (*ReqResult, error) {
	out := new(ReqResult)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/GetDatamodelReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) DeleteInstanceReq(ctx context.Context, in *DeleteInstanceReqData, opts ...grpc.CallOption) (*ReqResult, error) {
	out := new(ReqResult)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/DeleteInstanceReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetAgentMsgs(ctx context.Context, in *GetAgentMsgsData, opts ...grpc.CallOption) (*ReqResult, error) {
	out := new(ReqResult)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/GetAgentMsgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetInfo(ctx context.Context, in *None, opts ...grpc.CallOption) (*InfoData, error) {
	out := new(InfoData)
	err := c.cc.Invoke(ctx, "/cntrlgrpc.Grpc/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) Stream(ctx context.Context, in *GetParamReqData, opts ...grpc.CallOption) (Grpc_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Grpc_ServiceDesc.Streams[0], "/cntrlgrpc.Grpc/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Grpc_StreamClient interface {
	Recv() (*ReqResult, error)
	grpc.ClientStream
}

type grpcStreamClient struct {
	grpc.ClientStream
}

func (x *grpcStreamClient) Recv() (*ReqResult, error) {
	m := new(ReqResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServer is the server API for Grpc service.
// All implementations must embed UnimplementedGrpcServer
// for forward compatibility
type GrpcServer interface {
	GetParamReq(context.Context, *GetParamReqData) (*ReqResult, error)
	SetParamReq(context.Context, *SetParamReqData) (*SetParamResData, error)
	GetInstancesReq(context.Context, *GetInstancesReqData) (*ReqResult, error)
	AddInstanceReq(context.Context, *AddInstanceReqData) (*AddInstanceResData, error)
	OperateReq(context.Context, *OperateReqData) (*OperateResData, error)
	GetDatamodelReq(context.Context, *GetDatamodelReqData) (*ReqResult, error)
	DeleteInstanceReq(context.Context, *DeleteInstanceReqData) (*ReqResult, error)
	GetAgentMsgs(context.Context, *GetAgentMsgsData) (*ReqResult, error)
	GetInfo(context.Context, *None) (*InfoData, error)
	Stream(*GetParamReqData, Grpc_StreamServer) error
	mustEmbedUnimplementedGrpcServer()
}

// UnimplementedGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (UnimplementedGrpcServer) GetParamReq(context.Context, *GetParamReqData) (*ReqResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParamReq not implemented")
}
func (UnimplementedGrpcServer) SetParamReq(context.Context, *SetParamReqData) (*SetParamResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParamReq not implemented")
}
func (UnimplementedGrpcServer) GetInstancesReq(context.Context, *GetInstancesReqData) (*ReqResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesReq not implemented")
}
func (UnimplementedGrpcServer) AddInstanceReq(context.Context, *AddInstanceReqData) (*AddInstanceResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceReq not implemented")
}
func (UnimplementedGrpcServer) OperateReq(context.Context, *OperateReqData) (*OperateResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateReq not implemented")
}
func (UnimplementedGrpcServer) GetDatamodelReq(context.Context, *GetDatamodelReqData) (*ReqResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatamodelReq not implemented")
}
func (UnimplementedGrpcServer) DeleteInstanceReq(context.Context, *DeleteInstanceReqData) (*ReqResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstanceReq not implemented")
}
func (UnimplementedGrpcServer) GetAgentMsgs(context.Context, *GetAgentMsgsData) (*ReqResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentMsgs not implemented")
}
func (UnimplementedGrpcServer) GetInfo(context.Context, *None) (*InfoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedGrpcServer) Stream(*GetParamReqData, Grpc_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedGrpcServer) mustEmbedUnimplementedGrpcServer() {}

// UnsafeGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServer will
// result in compilation errors.
type UnsafeGrpcServer interface {
	mustEmbedUnimplementedGrpcServer()
}

func RegisterGrpcServer(s grpc.ServiceRegistrar, srv GrpcServer) {
	s.RegisterService(&Grpc_ServiceDesc, srv)
}

func _Grpc_GetParamReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParamReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetParamReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/GetParamReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetParamReq(ctx, req.(*GetParamReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_SetParamReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).SetParamReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/SetParamReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).SetParamReq(ctx, req.(*SetParamReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetInstancesReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetInstancesReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/GetInstancesReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetInstancesReq(ctx, req.(*GetInstancesReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_AddInstanceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).AddInstanceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/AddInstanceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).AddInstanceReq(ctx, req.(*AddInstanceReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_OperateReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).OperateReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/OperateReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).OperateReq(ctx, req.(*OperateReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetDatamodelReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatamodelReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetDatamodelReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/GetDatamodelReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetDatamodelReq(ctx, req.(*GetDatamodelReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_DeleteInstanceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).DeleteInstanceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/DeleteInstanceReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).DeleteInstanceReq(ctx, req.(*DeleteInstanceReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetAgentMsgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentMsgsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetAgentMsgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/GetAgentMsgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetAgentMsgs(ctx, req.(*GetAgentMsgsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cntrlgrpc.Grpc/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetInfo(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetParamReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServer).Stream(m, &grpcStreamServer{stream})
}

type Grpc_StreamServer interface {
	Send(*ReqResult) error
	grpc.ServerStream
}

type grpcStreamServer struct {
	grpc.ServerStream
}

func (x *grpcStreamServer) Send(m *ReqResult) error {
	return x.ServerStream.SendMsg(m)
}

// Grpc_ServiceDesc is the grpc.ServiceDesc for Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cntrlgrpc.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParamReq",
			Handler:    _Grpc_GetParamReq_Handler,
		},
		{
			MethodName: "SetParamReq",
			Handler:    _Grpc_SetParamReq_Handler,
		},
		{
			MethodName: "GetInstancesReq",
			Handler:    _Grpc_GetInstancesReq_Handler,
		},
		{
			MethodName: "AddInstanceReq",
			Handler:    _Grpc_AddInstanceReq_Handler,
		},
		{
			MethodName: "OperateReq",
			Handler:    _Grpc_OperateReq_Handler,
		},
		{
			MethodName: "GetDatamodelReq",
			Handler:    _Grpc_GetDatamodelReq_Handler,
		},
		{
			MethodName: "DeleteInstanceReq",
			Handler:    _Grpc_DeleteInstanceReq_Handler,
		},
		{
			MethodName: "GetAgentMsgs",
			Handler:    _Grpc_GetAgentMsgs_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Grpc_GetInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Grpc_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cntlr.proto",
}
