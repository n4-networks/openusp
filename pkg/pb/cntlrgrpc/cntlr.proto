// Copyright 2023 N4-Networks.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cntrlgrpc;

//import "google.protobuf.empty.proto";

option go_package = "github.com/n4-networks/openusp/pkg/pb/cntlrgrpc";

message SetParamReqData {
  string agentId = 1;
  string msgId = 2;
  string path = 3;
  string param = 4;
  string value = 5;
}
message SetParamResData {
  bool isSuccess = 1;
  string agentId = 2;
  string msgId = 3;
  repeated Param paramSet = 4;
  message Param {
    string path = 1;
	string value = 2;
  }
  string errMsg = 5;
}
message ReqResult{
  bool isSuccess = 1;
  string errMsg = 2;
}

message GetParamReqData {
  string agentId = 1;
  string msgId = 2;
  string path = 3;
}

message GetInstancesReqData {
  string agentId = 1;
  string msgId = 2;
  string path = 3;
  bool   firstLevelOnly = 4;
}

message AddInstanceReqData {
  string agentId = 1;
  string msgId = 2;
  repeated Object objs = 3;
  message Object {
    string path = 1;
    map<string, string> params = 2;
  }
}
message AddInstanceResData {
  bool isSuccess = 1;
  string agentId = 2;
  string msgId = 3;
  repeated Instance inst = 4;
  message Instance {
    string path = 1;
	map<string, string> uniqueKeys = 2;
  }
  string errMsg = 5;
}

message OperateReqData {
  string agentId = 1;
  string msgId = 2;
  string cmd = 3;
  string cmdKey = 4;
  bool   resp = 5;
  map<string, string> inputs = 6;
}

message OperateResData {
  bool isSuccess = 1;
  string agentId = 2;
  string msgId = 3;
  string cmd = 4;
  oneof resp {
    string path = 5;
	OutputArgs args = 6;
	string errMsg = 7;
  }
  message OutputArgs {
    map<string, string> outputs = 1;
  }
}

message GetDatamodelReqData {
  string agentId = 1;
  string msgId = 2;
  string path = 3;
  bool   retCmd = 4;
  bool   retEvents  = 5;
  bool   retParams = 6;
}

message DeleteInstanceReqData {
  string agentId = 1;
  string msgId = 2;
  string objPath = 3;
}

message GetAgentMsgsData {
  string agentId = 1;
}

message InfoData {
  string version = 1;
}

message None {}

service Grpc{
  rpc GetParamReq(GetParamReqData) returns (ReqResult){};
  rpc SetParamReq(SetParamReqData) returns (SetParamResData){};
  rpc GetInstancesReq(GetInstancesReqData) returns (ReqResult){};
  rpc AddInstanceReq(AddInstanceReqData) returns (AddInstanceResData){};
  rpc OperateReq(OperateReqData) returns (OperateResData){};
  rpc GetDatamodelReq(GetDatamodelReqData) returns (ReqResult){};
  rpc DeleteInstanceReq(DeleteInstanceReqData) returns (ReqResult){};
  rpc GetAgentMsgs(GetAgentMsgsData) returns (ReqResult){};
  rpc GetInfo(None) returns (InfoData){};

  rpc Stream(GetParamReqData) returns (stream ReqResult){};
}
