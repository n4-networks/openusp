// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.13.0
// source: usp-record-1-2.proto

//**************************************************************************
// TR-369 USP Record Protocol Buffer Schema
//
//  Copyright (c) 2017-2018, Broadband Forum
//
//  The undersigned members have elected to grant the copyright to
//  their contributed material used in this software:
//    Copyright (c) 2017-2018 ARRIS Enterprises, LLC.
//
//  Redistribution and use in source and binary forms, with or
//   without modification, are permitted provided that the following
//   conditions are met:
//
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above
//      copyright notice, this list of conditions and the following
//      disclaimer in the documentation and/or other materials
//      provided with the distribution.
//
//   3. Neither the name of the copyright holder nor the names of its
//      contributors may be used to endorse or promote products
//      derived from this software without specific prior written
//      permission.
//
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
//   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
//   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
//   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
//   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//   The above license is used as a license under copyright only.
//   Please reference the Forum IPR Policy for patent licensing terms
//   <https://www.broadband-forum.org/ipr-policy>.
//
//   Any moral rights which are necessary to exercise under the above
//   license grant are also deemed granted under this license.
//
//
// | Version           | Name                   | Date       |
// | TR-369 1.0.0      | User Services Platform | APR, 2018  |
// | TR-369 1.0.1      | User Services Platform | JUN, 2018  |
// | TR-369 1.0.2      | User Services Platform | OCT, 2018  |
// | TR-369 1.1        | User Services Platform | SEP, 2019  |
//
// BBF software release registry: http://www.broadband-forum.org/software
//**************************************************************************

package usp_record

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Record_PayloadSecurity int32

const (
	Record_PLAINTEXT Record_PayloadSecurity = 0
	Record_TLS12     Record_PayloadSecurity = 1
)

// Enum value maps for Record_PayloadSecurity.
var (
	Record_PayloadSecurity_name = map[int32]string{
		0: "PLAINTEXT",
		1: "TLS12",
	}
	Record_PayloadSecurity_value = map[string]int32{
		"PLAINTEXT": 0,
		"TLS12":     1,
	}
)

func (x Record_PayloadSecurity) Enum() *Record_PayloadSecurity {
	p := new(Record_PayloadSecurity)
	*p = x
	return p
}

func (x Record_PayloadSecurity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Record_PayloadSecurity) Descriptor() protoreflect.EnumDescriptor {
	return file_usp_record_1_2_proto_enumTypes[0].Descriptor()
}

func (Record_PayloadSecurity) Type() protoreflect.EnumType {
	return &file_usp_record_1_2_proto_enumTypes[0]
}

func (x Record_PayloadSecurity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Record_PayloadSecurity.Descriptor instead.
func (Record_PayloadSecurity) EnumDescriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{0, 0}
}

type SessionContextRecord_PayloadSARState int32

const (
	SessionContextRecord_NONE      SessionContextRecord_PayloadSARState = 0 //No segmentation
	SessionContextRecord_BEGIN     SessionContextRecord_PayloadSARState = 1 //Begin segmentation
	SessionContextRecord_INPROCESS SessionContextRecord_PayloadSARState = 2 //Segmentation in process
	SessionContextRecord_COMPLETE  SessionContextRecord_PayloadSARState = 3 //Segmentation is complete
)

// Enum value maps for SessionContextRecord_PayloadSARState.
var (
	SessionContextRecord_PayloadSARState_name = map[int32]string{
		0: "NONE",
		1: "BEGIN",
		2: "INPROCESS",
		3: "COMPLETE",
	}
	SessionContextRecord_PayloadSARState_value = map[string]int32{
		"NONE":      0,
		"BEGIN":     1,
		"INPROCESS": 2,
		"COMPLETE":  3,
	}
)

func (x SessionContextRecord_PayloadSARState) Enum() *SessionContextRecord_PayloadSARState {
	p := new(SessionContextRecord_PayloadSARState)
	*p = x
	return p
}

func (x SessionContextRecord_PayloadSARState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionContextRecord_PayloadSARState) Descriptor() protoreflect.EnumDescriptor {
	return file_usp_record_1_2_proto_enumTypes[1].Descriptor()
}

func (SessionContextRecord_PayloadSARState) Type() protoreflect.EnumType {
	return &file_usp_record_1_2_proto_enumTypes[1]
}

func (x SessionContextRecord_PayloadSARState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionContextRecord_PayloadSARState.Descriptor instead.
func (SessionContextRecord_PayloadSARState) EnumDescriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{2, 0}
}

type MQTTConnectRecord_MQTTVersion int32

const (
	MQTTConnectRecord_V3_1_1 MQTTConnectRecord_MQTTVersion = 0 // Represents MQTT v3.1.1, a.k.a. v4 in the MQTT Spec
	MQTTConnectRecord_V5     MQTTConnectRecord_MQTTVersion = 1
)

// Enum value maps for MQTTConnectRecord_MQTTVersion.
var (
	MQTTConnectRecord_MQTTVersion_name = map[int32]string{
		0: "V3_1_1",
		1: "V5",
	}
	MQTTConnectRecord_MQTTVersion_value = map[string]int32{
		"V3_1_1": 0,
		"V5":     1,
	}
)

func (x MQTTConnectRecord_MQTTVersion) Enum() *MQTTConnectRecord_MQTTVersion {
	p := new(MQTTConnectRecord_MQTTVersion)
	*p = x
	return p
}

func (x MQTTConnectRecord_MQTTVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MQTTConnectRecord_MQTTVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_usp_record_1_2_proto_enumTypes[2].Descriptor()
}

func (MQTTConnectRecord_MQTTVersion) Type() protoreflect.EnumType {
	return &file_usp_record_1_2_proto_enumTypes[2]
}

func (x MQTTConnectRecord_MQTTVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MQTTConnectRecord_MQTTVersion.Descriptor instead.
func (MQTTConnectRecord_MQTTVersion) EnumDescriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{4, 0}
}

type STOMPConnectRecord_STOMPVersion int32

const (
	STOMPConnectRecord_V1_2 STOMPConnectRecord_STOMPVersion = 0
)

// Enum value maps for STOMPConnectRecord_STOMPVersion.
var (
	STOMPConnectRecord_STOMPVersion_name = map[int32]string{
		0: "V1_2",
	}
	STOMPConnectRecord_STOMPVersion_value = map[string]int32{
		"V1_2": 0,
	}
)

func (x STOMPConnectRecord_STOMPVersion) Enum() *STOMPConnectRecord_STOMPVersion {
	p := new(STOMPConnectRecord_STOMPVersion)
	*p = x
	return p
}

func (x STOMPConnectRecord_STOMPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STOMPConnectRecord_STOMPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_usp_record_1_2_proto_enumTypes[3].Descriptor()
}

func (STOMPConnectRecord_STOMPVersion) Type() protoreflect.EnumType {
	return &file_usp_record_1_2_proto_enumTypes[3]
}

func (x STOMPConnectRecord_STOMPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STOMPConnectRecord_STOMPVersion.Descriptor instead.
func (STOMPConnectRecord_STOMPVersion) EnumDescriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{5, 0}
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ToId            string                 `protobuf:"bytes,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	FromId          string                 `protobuf:"bytes,3,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	PayloadSecurity Record_PayloadSecurity `protobuf:"varint,4,opt,name=payload_security,json=payloadSecurity,proto3,enum=usp_record.Record_PayloadSecurity" json:"payload_security,omitempty"`
	MacSignature    []byte                 `protobuf:"bytes,5,opt,name=mac_signature,json=macSignature,proto3" json:"mac_signature,omitempty"` //MAC or Signature
	SenderCert      []byte                 `protobuf:"bytes,6,opt,name=sender_cert,json=senderCert,proto3" json:"sender_cert,omitempty"`
	// Types that are assignable to RecordType:
	//
	//	*Record_NoSessionContext
	//	*Record_SessionContext
	//	*Record_WebsocketConnect
	//	*Record_MqttConnect
	//	*Record_StompConnect
	//	*Record_Disconnect
	RecordType isRecord_RecordType `protobuf_oneof:"record_type"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Record) GetToId() string {
	if x != nil {
		return x.ToId
	}
	return ""
}

func (x *Record) GetFromId() string {
	if x != nil {
		return x.FromId
	}
	return ""
}

func (x *Record) GetPayloadSecurity() Record_PayloadSecurity {
	if x != nil {
		return x.PayloadSecurity
	}
	return Record_PLAINTEXT
}

func (x *Record) GetMacSignature() []byte {
	if x != nil {
		return x.MacSignature
	}
	return nil
}

func (x *Record) GetSenderCert() []byte {
	if x != nil {
		return x.SenderCert
	}
	return nil
}

func (m *Record) GetRecordType() isRecord_RecordType {
	if m != nil {
		return m.RecordType
	}
	return nil
}

func (x *Record) GetNoSessionContext() *NoSessionContextRecord {
	if x, ok := x.GetRecordType().(*Record_NoSessionContext); ok {
		return x.NoSessionContext
	}
	return nil
}

func (x *Record) GetSessionContext() *SessionContextRecord {
	if x, ok := x.GetRecordType().(*Record_SessionContext); ok {
		return x.SessionContext
	}
	return nil
}

func (x *Record) GetWebsocketConnect() *WebSocketConnectRecord {
	if x, ok := x.GetRecordType().(*Record_WebsocketConnect); ok {
		return x.WebsocketConnect
	}
	return nil
}

func (x *Record) GetMqttConnect() *MQTTConnectRecord {
	if x, ok := x.GetRecordType().(*Record_MqttConnect); ok {
		return x.MqttConnect
	}
	return nil
}

func (x *Record) GetStompConnect() *STOMPConnectRecord {
	if x, ok := x.GetRecordType().(*Record_StompConnect); ok {
		return x.StompConnect
	}
	return nil
}

func (x *Record) GetDisconnect() *DisconnectRecord {
	if x, ok := x.GetRecordType().(*Record_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

type isRecord_RecordType interface {
	isRecord_RecordType()
}

type Record_NoSessionContext struct {
	NoSessionContext *NoSessionContextRecord `protobuf:"bytes,7,opt,name=no_session_context,json=noSessionContext,proto3,oneof"`
}

type Record_SessionContext struct {
	SessionContext *SessionContextRecord `protobuf:"bytes,8,opt,name=session_context,json=sessionContext,proto3,oneof"`
}

type Record_WebsocketConnect struct {
	WebsocketConnect *WebSocketConnectRecord `protobuf:"bytes,9,opt,name=websocket_connect,json=websocketConnect,proto3,oneof"`
}

type Record_MqttConnect struct {
	MqttConnect *MQTTConnectRecord `protobuf:"bytes,10,opt,name=mqtt_connect,json=mqttConnect,proto3,oneof"`
}

type Record_StompConnect struct {
	StompConnect *STOMPConnectRecord `protobuf:"bytes,11,opt,name=stomp_connect,json=stompConnect,proto3,oneof"`
}

type Record_Disconnect struct {
	Disconnect *DisconnectRecord `protobuf:"bytes,12,opt,name=disconnect,proto3,oneof"`
}

func (*Record_NoSessionContext) isRecord_RecordType() {}

func (*Record_SessionContext) isRecord_RecordType() {}

func (*Record_WebsocketConnect) isRecord_RecordType() {}

func (*Record_MqttConnect) isRecord_RecordType() {}

func (*Record_StompConnect) isRecord_RecordType() {}

func (*Record_Disconnect) isRecord_RecordType() {}

type NoSessionContextRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NoSessionContextRecord) Reset() {
	*x = NoSessionContextRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoSessionContextRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoSessionContextRecord) ProtoMessage() {}

func (x *NoSessionContextRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoSessionContextRecord.ProtoReflect.Descriptor instead.
func (*NoSessionContextRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{1}
}

func (x *NoSessionContextRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SessionContextRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId          uint64                               `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SequenceId         uint64                               `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	ExpectedId         uint64                               `protobuf:"varint,3,opt,name=expected_id,json=expectedId,proto3" json:"expected_id,omitempty"`
	RetransmitId       uint64                               `protobuf:"varint,4,opt,name=retransmit_id,json=retransmitId,proto3" json:"retransmit_id,omitempty"`
	PayloadSarState    SessionContextRecord_PayloadSARState `protobuf:"varint,5,opt,name=payload_sar_state,json=payloadSarState,proto3,enum=usp_record.SessionContextRecord_PayloadSARState" json:"payload_sar_state,omitempty"`
	PayloadrecSarState SessionContextRecord_PayloadSARState `protobuf:"varint,6,opt,name=payloadrec_sar_state,json=payloadrecSarState,proto3,enum=usp_record.SessionContextRecord_PayloadSARState" json:"payloadrec_sar_state,omitempty"`
	Payload            [][]byte                             `protobuf:"bytes,7,rep,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SessionContextRecord) Reset() {
	*x = SessionContextRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionContextRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionContextRecord) ProtoMessage() {}

func (x *SessionContextRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionContextRecord.ProtoReflect.Descriptor instead.
func (*SessionContextRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{2}
}

func (x *SessionContextRecord) GetSessionId() uint64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SessionContextRecord) GetSequenceId() uint64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *SessionContextRecord) GetExpectedId() uint64 {
	if x != nil {
		return x.ExpectedId
	}
	return 0
}

func (x *SessionContextRecord) GetRetransmitId() uint64 {
	if x != nil {
		return x.RetransmitId
	}
	return 0
}

func (x *SessionContextRecord) GetPayloadSarState() SessionContextRecord_PayloadSARState {
	if x != nil {
		return x.PayloadSarState
	}
	return SessionContextRecord_NONE
}

func (x *SessionContextRecord) GetPayloadrecSarState() SessionContextRecord_PayloadSARState {
	if x != nil {
		return x.PayloadrecSarState
	}
	return SessionContextRecord_NONE
}

func (x *SessionContextRecord) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type WebSocketConnectRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WebSocketConnectRecord) Reset() {
	*x = WebSocketConnectRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSocketConnectRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSocketConnectRecord) ProtoMessage() {}

func (x *WebSocketConnectRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSocketConnectRecord.ProtoReflect.Descriptor instead.
func (*WebSocketConnectRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{3}
}

type MQTTConnectRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         MQTTConnectRecord_MQTTVersion `protobuf:"varint,1,opt,name=version,proto3,enum=usp_record.MQTTConnectRecord_MQTTVersion" json:"version,omitempty"`
	SubscribedTopic string                        `protobuf:"bytes,2,opt,name=subscribed_topic,json=subscribedTopic,proto3" json:"subscribed_topic,omitempty"`
}

func (x *MQTTConnectRecord) Reset() {
	*x = MQTTConnectRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTConnectRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTConnectRecord) ProtoMessage() {}

func (x *MQTTConnectRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTConnectRecord.ProtoReflect.Descriptor instead.
func (*MQTTConnectRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{4}
}

func (x *MQTTConnectRecord) GetVersion() MQTTConnectRecord_MQTTVersion {
	if x != nil {
		return x.Version
	}
	return MQTTConnectRecord_V3_1_1
}

func (x *MQTTConnectRecord) GetSubscribedTopic() string {
	if x != nil {
		return x.SubscribedTopic
	}
	return ""
}

type STOMPConnectRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               STOMPConnectRecord_STOMPVersion `protobuf:"varint,1,opt,name=version,proto3,enum=usp_record.STOMPConnectRecord_STOMPVersion" json:"version,omitempty"`
	SubscribedDestination string                          `protobuf:"bytes,2,opt,name=subscribed_destination,json=subscribedDestination,proto3" json:"subscribed_destination,omitempty"`
}

func (x *STOMPConnectRecord) Reset() {
	*x = STOMPConnectRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STOMPConnectRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STOMPConnectRecord) ProtoMessage() {}

func (x *STOMPConnectRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STOMPConnectRecord.ProtoReflect.Descriptor instead.
func (*STOMPConnectRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{5}
}

func (x *STOMPConnectRecord) GetVersion() STOMPConnectRecord_STOMPVersion {
	if x != nil {
		return x.Version
	}
	return STOMPConnectRecord_V1_2
}

func (x *STOMPConnectRecord) GetSubscribedDestination() string {
	if x != nil {
		return x.SubscribedDestination
	}
	return ""
}

type DisconnectRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason     string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	ReasonCode uint32 `protobuf:"fixed32,2,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *DisconnectRecord) Reset() {
	*x = DisconnectRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usp_record_1_2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRecord) ProtoMessage() {}

func (x *DisconnectRecord) ProtoReflect() protoreflect.Message {
	mi := &file_usp_record_1_2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRecord.ProtoReflect.Descriptor instead.
func (*DisconnectRecord) Descriptor() ([]byte, []int) {
	return file_usp_record_1_2_proto_rawDescGZIP(), []int{6}
}

func (x *DisconnectRecord) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DisconnectRecord) GetReasonCode() uint32 {
	if x != nil {
		return x.ReasonCode
	}
	return 0
}

var File_usp_record_1_2_proto protoreflect.FileDescriptor

var file_usp_record_1_2_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x73, 0x70, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2d, 0x31, 0x2d, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x22, 0xe0, 0x05, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x61, 0x63,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x6f,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b,
	0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x77,
	0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x71, 0x74, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73, 0x70, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x6f,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x4c, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x4c, 0x53, 0x31, 0x32, 0x10, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x4e, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x14, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x41, 0x52,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x72, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x41,
	0x52, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x72,
	0x65, 0x63, 0x53, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x43, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x41, 0x52, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0x18, 0x0a, 0x16, 0x57, 0x65, 0x62,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x70,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x21, 0x0a, 0x0b, 0x4d, 0x51, 0x54,
	0x54, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x33, 0x5f, 0x31,
	0x5f, 0x31, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x35, 0x10, 0x01, 0x22, 0xac, 0x01, 0x0a,
	0x12, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x18, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x4d, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x31, 0x5f, 0x32, 0x10, 0x00, 0x22, 0x4b, 0x0a, 0x10, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x34, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x75, 0x73, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x62, 0x62,
	0x66, 0x2f, 0x75, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usp_record_1_2_proto_rawDescOnce sync.Once
	file_usp_record_1_2_proto_rawDescData = file_usp_record_1_2_proto_rawDesc
)

func file_usp_record_1_2_proto_rawDescGZIP() []byte {
	file_usp_record_1_2_proto_rawDescOnce.Do(func() {
		file_usp_record_1_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_usp_record_1_2_proto_rawDescData)
	})
	return file_usp_record_1_2_proto_rawDescData
}

var file_usp_record_1_2_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_usp_record_1_2_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_usp_record_1_2_proto_goTypes = []interface{}{
	(Record_PayloadSecurity)(0),               // 0: usp_record.Record.PayloadSecurity
	(SessionContextRecord_PayloadSARState)(0), // 1: usp_record.SessionContextRecord.PayloadSARState
	(MQTTConnectRecord_MQTTVersion)(0),        // 2: usp_record.MQTTConnectRecord.MQTTVersion
	(STOMPConnectRecord_STOMPVersion)(0),      // 3: usp_record.STOMPConnectRecord.STOMPVersion
	(*Record)(nil),                            // 4: usp_record.Record
	(*NoSessionContextRecord)(nil),            // 5: usp_record.NoSessionContextRecord
	(*SessionContextRecord)(nil),              // 6: usp_record.SessionContextRecord
	(*WebSocketConnectRecord)(nil),            // 7: usp_record.WebSocketConnectRecord
	(*MQTTConnectRecord)(nil),                 // 8: usp_record.MQTTConnectRecord
	(*STOMPConnectRecord)(nil),                // 9: usp_record.STOMPConnectRecord
	(*DisconnectRecord)(nil),                  // 10: usp_record.DisconnectRecord
}
var file_usp_record_1_2_proto_depIdxs = []int32{
	0,  // 0: usp_record.Record.payload_security:type_name -> usp_record.Record.PayloadSecurity
	5,  // 1: usp_record.Record.no_session_context:type_name -> usp_record.NoSessionContextRecord
	6,  // 2: usp_record.Record.session_context:type_name -> usp_record.SessionContextRecord
	7,  // 3: usp_record.Record.websocket_connect:type_name -> usp_record.WebSocketConnectRecord
	8,  // 4: usp_record.Record.mqtt_connect:type_name -> usp_record.MQTTConnectRecord
	9,  // 5: usp_record.Record.stomp_connect:type_name -> usp_record.STOMPConnectRecord
	10, // 6: usp_record.Record.disconnect:type_name -> usp_record.DisconnectRecord
	1,  // 7: usp_record.SessionContextRecord.payload_sar_state:type_name -> usp_record.SessionContextRecord.PayloadSARState
	1,  // 8: usp_record.SessionContextRecord.payloadrec_sar_state:type_name -> usp_record.SessionContextRecord.PayloadSARState
	2,  // 9: usp_record.MQTTConnectRecord.version:type_name -> usp_record.MQTTConnectRecord.MQTTVersion
	3,  // 10: usp_record.STOMPConnectRecord.version:type_name -> usp_record.STOMPConnectRecord.STOMPVersion
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_usp_record_1_2_proto_init() }
func file_usp_record_1_2_proto_init() {
	if File_usp_record_1_2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_usp_record_1_2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoSessionContextRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionContextRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSocketConnectRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTConnectRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STOMPConnectRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usp_record_1_2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_usp_record_1_2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Record_NoSessionContext)(nil),
		(*Record_SessionContext)(nil),
		(*Record_WebsocketConnect)(nil),
		(*Record_MqttConnect)(nil),
		(*Record_StompConnect)(nil),
		(*Record_Disconnect)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usp_record_1_2_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_usp_record_1_2_proto_goTypes,
		DependencyIndexes: file_usp_record_1_2_proto_depIdxs,
		EnumInfos:         file_usp_record_1_2_proto_enumTypes,
		MessageInfos:      file_usp_record_1_2_proto_msgTypes,
	}.Build()
	File_usp_record_1_2_proto = out.File
	file_usp_record_1_2_proto_rawDesc = nil
	file_usp_record_1_2_proto_goTypes = nil
	file_usp_record_1_2_proto_depIdxs = nil
}
